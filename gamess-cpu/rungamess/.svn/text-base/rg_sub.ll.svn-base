#!/bin/ksh
#
# rungamess submission  - SP2 LoadLeveller version
#
# --------------------------------------------------------------
# Make LoadLeveller script file
# --------------------------------------------------------------
#

time=${jobtime}:00

nodes1=`expr 1 + \( $nprocs - 1 \) / $procspernode` 
nodes2=$procspernode

echo '#!/bin/ksh'                                           >  $jobname.script
echo '#@ node = ' $nodes1,$nodes1                           >> $jobname.script
echo '#@ tasks_per_node = ' $nodes2                         >> $jobname.script
echo '#@ output = ' $homedir/$jobname.out                   >> $jobname.script
echo '#@ error = ' $homedir/$jobname.err                    >> $jobname.script
echo '#@ job_type = parallel'                               >> $jobname.script
#
# HPCx Requires these 
echo '#@ wall_clock_limit  = ' $time                        >> $jobname.script
echo '#@ network.LAPI = csss,not_shared,us '                >> $jobname.script
echo '#@ node_usage = not_shared'                           >> $jobname.script

case $project in
  none) ;;
  *)echo '#@ account_no =' $project                         >> $jobname.script
  ;;
esac 

case $class in
  none) ;;
  *)
  echo '#@ class = ' $class                                 >> $jobname.script
esac

echo '#@ queue'                                             >> $jobname.script
echo '# '                                                   >> $jobname.script
echo '# This script was generated by rungamess. You may need to'>> $jobname.script
echo '# customise' $RUNGAMESS_DIR/rg_sub.ll                  >> $jobname.script
echo '# '                                                   >> $jobname.script
#
#  Set some environment variables. Getting these right is nontrivial
#  Here are some guesses

# These are known for certain
echo 'export MP_EUILIB=us'                                  >> $jobname.script
echo 'export MP_MSG_API=lapi'                               >> $jobname.script
echo 'export MP_CSS_INTERRUPT=yes'                          >> $jobname.script
echo 'export RT_GRQ=ON'                                     >> $jobname.script

# should have no affect as we are not using MPI, however experience
# contradicts this
echo 'export MP_SHARED_MEMORY=yes'                          >> $jobname.script

echo 'export MP_WAIT_MODE=yield'                            >> $jobname.script
echo 'export AIXTHREAD_SCOPE=S'                             >> $jobname.script
echo 'export MP_PULSE=0'                                    >> $jobname.script
echo 'export MP_SINGLE_THREAD=yes'                          >> $jobname.script

# Diagnostic level on stderr
echo 'export MP_INFOLEVEL=1'                                >> $jobname.script

# this is a bit controversial as some problems have been seen with
# the yes setting, however, TCGMSG two-sided comms are degraded when
# forced to run over the switch
echo 'export LAPI_USE_SHM=yes'                              >> $jobname.script
#echo 'export LAPI_USE_SHM=no'                              >> $jobname.script

# the best value is uncertain
echo 'export MP_POLLING_INTERVAL=25000'                     >> $jobname.script
#

$RUNGAMESS_DIR/rg_export                                    >> $jobname.script
echo 'export poeargs=" ' ${arg} '"'                         >> $jobname.script
echo $RUNGAMESS_DIR/rg_exe.poe                              >> $jobname.script
#
# --------------------------------------------------------------
# submit to the queue
# --------------------------------------------------------------
#
llsubmit $jobname.script

