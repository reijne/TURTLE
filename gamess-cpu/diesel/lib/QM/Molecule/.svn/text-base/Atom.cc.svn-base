//***********************************************************************
//
//	Name:			Atom.cc
//
//	Description:	
//
//	Author:			Michael Hanrath
//
//	Version:		0.0
//
//	Date:			07. Feb 1998
//
//***********************************************************************

#include "Atom.h"

#include <string>
#include <ctype.h>

#include "../../Math/MatrixVector/Vector.h"

//*********************************************************************
//
//
//				the following is borrowed from "molden"
//
//

const INT nElements = 100;
const INT numDis = 11;

static INT DisAtoms[numDis] = {1,6,7,8,9,14,15,16,17,35,53};
static INT Map[nElements] = {
	0, 0, 0, 0, 0, 
	1,
	2,
	3,
	4, 0, 0, 0, 0,
	5,
	6,
	7,
	8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	10, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0 };
	
static double SingleDis[numDis][numDis] = {
	{1.008,1.089,1.008,0.950,1.008,1.008,1.008,1.008,1.008,1.008,1.008},
	{1.089,1.450,1.440,1.400,1.330,1.850,1.850,1.710,1.750,1.900,2.092},
	{1.008,1.440,1.418,1.400,1.360,1.000,1.491,1.625,1.790,2.140,1.800},
	{0.950,1.400,1.400,1.480,1.390,1.620,1.600,1.500,1.700,2.000,1.890},
	{1.008,1.330,1.360,1.390,1.417,1.561,1.500,1.570,1.628,1.756,2.000},
	{1.008,1.850,1.000,1.620,1.561,2.300,2.000,2.000,2.030,2.270,2.300},
	{1.008,1.850,1.490,1.600,1.500,2.000,1.894,1.860,2.020,2.140,2.420},
	{1.008,1.710,1.625,1.500,1.570,2.000,1.860,2.030,2.000,2.270,2.300},
	{1.008,1.750,1.790,1.700,1.628,2.030,2.020,2.000,1.988,2.138,2.303},
	{1.008,1.900,2.140,1.700,1.756,2.270,2.140,2.270,1.988,2.290,2.500},
	{1.008,2.092,1.800,1.890,2.000,2.270,2.420,2.300,2.303,2.500,2.662}
	};

static double DoubleDis[numDis][numDis] = {
	{1.008,1.089,1.008,0.950,1.008,1.008,1.008,1.008,1.008,1.008,1.008},
	{1.089,1.335,1.300,1.220,1.330,1.850,1.850,1.800,1.750,1.900,2.092},
	{1.008,1.300,1.346,1.220,1.360,1.000,1.491,1.625,1.790,2.140,1.800},
	{0.950,1.220,1.220,1.210,1.390,1.620,1.490,1.450,1.700,2.000,1.890},
	{1.008,1.330,1.360,1.390,1.417,1.561,1.500,1.570,1.628,1.756,2.000},
	{1.008,1.850,1.000,1.620,1.561,2.300,2.000,2.000,2.030,2.270,2.300},
	{1.008,1.850,1.490,1.490,1.500,2.000,1.894,1.860,2.020,2.140,2.420},
	{1.008,1.800,1.625,1.450,1.570,2.000,1.860,2.030,2.000,2.270,2.300},
	{1.008,1.750,1.790,1.700,1.628,2.030,2.020,2.000,1.988,2.138,2.303},
	{1.008,1.900,2.140,1.700,1.756,2.270,2.140,2.270,1.988,2.290,2.500},
	{1.008,2.092,1.800,1.890,2.000,2.270,2.420,2.300,2.303,2.500,2.662}
	};

static double TripleDis[numDis][numDis] = {
	{1.008,1.089,1.008,0.950,1.008,1.008,1.008,1.008,1.008,1.008,1.008},
	{1.089,1.204,1.158,1.400,1.330,1.850,1.850,1.710,1.750,1.900,2.092},
	{1.008,1.158,1.100,1.400,1.360,1.000,1.491,1.625,1.790,2.140,1.800},
	{0.950,1.400,1.400,1.480,1.390,1.620,1.600,1.500,1.700,2.000,1.890},
	{1.008,1.330,1.360,1.390,1.417,1.561,1.500,1.570,1.628,1.756,2.000},
	{1.008,1.850,1.000,1.620,1.561,2.300,2.000,2.000,2.030,2.270,2.300},
	{1.008,1.850,1.490,1.600,1.500,2.000,1.894,1.860,2.020,2.140,2.420},
	{1.008,1.710,1.625,1.500,1.570,2.000,1.860,2.030,2.000,2.270,2.300},
	{1.008,1.750,1.790,1.700,1.628,2.030,2.020,2.000,1.988,2.138,2.303},
	{1.008,1.900,2.140,1.700,1.756,2.270,2.140,2.270,1.988,2.290,2.500},
	{1.008,2.092,1.800,1.890,2.000,2.270,2.420,2.300,2.303,2.500,2.662}
	};

static char *elements[] = {
	"Bq","H","He","Li","Be","B","C","N","O","F","Ne",
	"Na","Mg","Al","Si","P","S","Cl","Ar",
	"K","Ca","Sc","Ti","V","Cr","Mn","Fe","Co","Ni","Cu",
	"Zn","Ga","Ge","As","Se","Br","Kr",
	"Rb","Sr","Y","Zr","Nb","Mo","Tc","Ru","Rh","Pd","Ag",
	"Cd","In","Sn","Sb","Te","I","Xe",
	"Cs","Ba","La","Ce","Pr","Nd","Pm","Sm","Eu","Gd","Tb","Dy",
	"Ho","Er","Tm","Yb","Lu","Hf","Ta","W","Re","Os","Ir","Pt",
	"Au","Hg","Tl","Pb","Bi","Po","At","Rn",
	"Fr","Ra","Ac","Th","Pa","U","Np","Pu","Am","Cm","Bk","Cf","X"};

//
//
//
//
//
//*********************************************************************

Atom::Atom()
{
	charge = 0;
	nr = 0;
}

Atom::Atom(istream &s) :
	TypeClass(s), Point(s)
{
	charge = 0;
	nr = 0;
	assignName();
}


TBond	Atom::getBond(const Atom &a) const
{
double	dist = (*this - a).getNorm2();

double	dist3[3];
INT	i = Map[nr-1];
INT	j = Map[a.getNr()-1];

	 dist3[0] = 1.1*SingleDis[i][j];
	 dist3[1] = (DoubleDis[i][j] + SingleDis[i][j]) / 2;
	 dist3[2] = (TripleDis[i][j] + DoubleDis[i][j]) / 2;
	 

INT	n = 1;
	if ( dist>dist3[0] )
		n = 0;
	else
	if ( dist>dist3[1] )
		n = 1;
	else
	if ( dist>dist3[2] )
		n = 2;
	else
	if ( TripleDis[i][j]<DoubleDis[i][j] )
		n = 3;
	else
	if ( DoubleDis[i][j]<SingleDis[i][j] )
		n = 2;
	
	return TBond(dist, n, this, &a);
}



Atom::Atom(String label, double _charge, double x, double y, double z) :
	TypeClass(label), Point(x, y, z)
{
	charge = _charge;
	assignName();
}

void	Atom::writeToStream(ostream &s) const
{
	TypeClass::writeToStream(s);
	s << " ";
	Point::writeToStream(s);
}

void	Atom::assignName()
{
	Name[0] = toupper(Name[0]);
	if ( Name.length()>1 )
		Name[1] = tolower(Name[1]);
	
	for ( INT i=0 ; i<nElements ; i++ )
	{
		if ( !strncmp(elements[i], Name.chars(), strlen(elements[i])) )
		{
			nr = i;
			break;
		}
	}
}

String	Atom::getNameFromCharge(INT charge)
{
	return elements[charge];
}

double	Atom::getChargeFromName(String name)
{
Atom	atom;
	atom.Name = name;
	atom.assignName();
	return atom.getNr();
}

ostream &	operator << (ostream &s, const Atom & a)
{
	s << ((TypeClass) a) << " " << (Vector<double>(a));
	return s;
}
