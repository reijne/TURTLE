      integer function intpos(ii,jj,kk,ll)
c
      use ikyg
      implicit none
c
c     determine position in closely packed  2-el integral array
c     used in VB
c
c     1111
c     1
c     2111  2121
c     2     3
c     2211  2221 2222
c     4      5    6
c     3111  3121 3122 3131
c     7     8     9    10
c     3211  3221 3222 3231 3232
c     11    12   13    14   15     
c     3311  3321 3322 3331 3332  3333
c     16    17    18
c     4111  4121 4122 4131 4132  4133 4141
c     19    20    21  22    23         24
c     4211  4221 4222 4231 4132  4233 4241 4242
c     25     26  27   28    29         30   31      
c     4311  4321 4322 4331 4332  4333 4341 4342 4343
c     32    33    34                             
c     4411  4421 4422 4431 4432  4433 4441 4443 4443 4444
c     35    36    37                    
c     5111  5121 5122 5131 5132  5133 5141 5142 5143 5144  5151
c      x     x    x    x    x          x    x               x
c     5211  5221 5222 5231 5132  5233 5241 5242 5243 5244  5251 5252
c      x     x    x    x    x          x    x               x    x
c     5311  5321 5322 5331 5332  5333 5341 5342 5343 5344  5351 5352 5353
c      x     x    x                                       
c     5411  5421 5422 5431 5432  5433 5441 5443 5443 5444  5451 5452 5453 5454
c      x     x    x
c     5511  5521 5522 5531 5532  5533 5541 5543 5543 5544  5551 5552 5553 5554 5555
c      x     x    x
c
c_INCLUDE(common/turtleparam)
c_INCLUDE(../m4/common/sizes)
c_INCLUDE(../m4/common/mapper)
_INCLUDE(../m4/common/iofile)
c
      integer ii,jj,kk,ll,setintpos,nscf,nbasis
c
c     save ikyiky,nocc,nocc1,lbase
c     integer ikyiky(mxorbvb*(mxorbvb+1)/2),nocc,nocc1,lbase
      integer i,j,k,l,ij,ijkl,ibase,icnt,itemp,jtemp
c

      icnt = 0
      if ( ii .le. nocc ) icnt = icnt + 1
      if ( jj .le. nocc ) icnt = icnt + 1
      if ( kk .le. nocc ) icnt = icnt + 1
      if ( ll .le. nocc ) icnt = icnt + 1

      i = max(ii,jj)
      j = min(ii,jj)
      k = max(kk,ll)
      l = min(kk,ll)
      if (k.gt.i .or. ( k.eq.i .and. l.gt.j) ) then
        itemp = i
        i = k
        k = itemp
        jtemp = j
        j = l
        l = jtemp
      end if
      ij = iky(i)+j

      if (k.le.nocc) then
        ijkl = ikyiky(ij)+iky(k)+l
      else if (j.le.nocc .and. l.le.nocc) then
        ijkl = ikyiky(ij)+lbase+nocc*(k-nocc1)+l
      else
        ijkl = 0
      end if

c     if ( icnt .le. 1 .and. ijkl .gt. 0 ) then
c       write(iwr,'(a,4I4,a,4I4,a,I10)') 
c    &  ' 2el integral with 3 or more virt. indexes:',
c    &  ii,jj,kk,ll,' => ',i,j,k,l,' = ',ijkl
c     end if

c     if ( icnt .gt. 1 .and. ijkl .eq. 0 ) then
c       write(iwr,'(a,4I4,a,4I4,a,I10)') 
c    &  ' 2el integral with 2 or less virt. indexes:',
c    &  ii,jj,kk,ll,' => ',i,j,k,l,' = ',ijkl
c     end if


      intpos = ijkl
c
      return
      end
c
      integer function setintpos(nscf,nbasis)
      use ikyg
      implicit none
      integer nscf,nbasis
c
      integer i,j,k,l,ij,ibase,ijkl

c
c...  initialise intpos
c
      nocc = nscf
      if ( nscf .le. 0 ) then
        nocc = nbasis
      end if

      nocc1 = nocc+1
      lbase = nocc*(nocc+1)/2
c
      ij = 0
      ibase = 0
      do i=1,nbasis
         iky(i) = ij
         do j=1,i
            k = i 
            l = k
            if (k.eq.i) l=j
            ij = ij + 1
            ikyiky(ij) = ibase
            ijkl = iky(k)+l
            if (k.le.nocc) then
              ijkl = iky(k)+l
            else if (j.le.nocc) then
              ijkl = lbase+nocc*(k-nocc1)+l
            else
              ijkl = lbase
            end if
            ibase = ibase + ijkl
         end do
      end  do

cc!$acc update device (ikyiky,iky,nocc,nocc1,lbase)
      setintpos = ibase
c       
      return
      end
